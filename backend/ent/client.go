// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/Asus/app/ent/migrate"

	"github.com/Asus/app/ent/room"
	"github.com/Asus/app/ent/roominfo"
	"github.com/Asus/app/ent/roomstatus"
	"github.com/Asus/app/ent/roomtype"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Room is the client for interacting with the Room builders.
	Room *RoomClient
	// RoomInfo is the client for interacting with the RoomInfo builders.
	RoomInfo *RoomInfoClient
	// RoomStatus is the client for interacting with the RoomStatus builders.
	RoomStatus *RoomStatusClient
	// RoomType is the client for interacting with the RoomType builders.
	RoomType *RoomTypeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Room = NewRoomClient(c.config)
	c.RoomInfo = NewRoomInfoClient(c.config)
	c.RoomStatus = NewRoomStatusClient(c.config)
	c.RoomType = NewRoomTypeClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Room:       NewRoomClient(cfg),
		RoomInfo:   NewRoomInfoClient(cfg),
		RoomStatus: NewRoomStatusClient(cfg),
		RoomType:   NewRoomTypeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:     cfg,
		Room:       NewRoomClient(cfg),
		RoomInfo:   NewRoomInfoClient(cfg),
		RoomStatus: NewRoomStatusClient(cfg),
		RoomType:   NewRoomTypeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Room.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Room.Use(hooks...)
	c.RoomInfo.Use(hooks...)
	c.RoomStatus.Use(hooks...)
	c.RoomType.Use(hooks...)
}

// RoomClient is a client for the Room schema.
type RoomClient struct {
	config
}

// NewRoomClient returns a client for the Room from the given config.
func NewRoomClient(c config) *RoomClient {
	return &RoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `room.Hooks(f(g(h())))`.
func (c *RoomClient) Use(hooks ...Hook) {
	c.hooks.Room = append(c.hooks.Room, hooks...)
}

// Create returns a create builder for Room.
func (c *RoomClient) Create() *RoomCreate {
	mutation := newRoomMutation(c.config, OpCreate)
	return &RoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Room.
func (c *RoomClient) Update() *RoomUpdate {
	mutation := newRoomMutation(c.config, OpUpdate)
	return &RoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomClient) UpdateOne(r *Room) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoom(r))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomClient) UpdateOneID(id int) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoomID(id))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Room.
func (c *RoomClient) Delete() *RoomDelete {
	mutation := newRoomMutation(c.config, OpDelete)
	return &RoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomClient) DeleteOne(r *Room) *RoomDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomClient) DeleteOneID(id int) *RoomDeleteOne {
	builder := c.Delete().Where(room.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomDeleteOne{builder}
}

// Create returns a query builder for Room.
func (c *RoomClient) Query() *RoomQuery {
	return &RoomQuery{config: c.config}
}

// Get returns a Room entity by its id.
func (c *RoomClient) Get(ctx context.Context, id int) (*Room, error) {
	return c.Query().Where(room.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomClient) GetX(ctx context.Context, id int) *Room {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryRoomstatus queries the roomstatus edge of a Room.
func (c *RoomClient) QueryRoomstatus(r *Room) *RoomStatusQuery {
	query := &RoomStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(roomstatus.Table, roomstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, room.RoomstatusTable, room.RoomstatusColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoomtype queries the roomtype edge of a Room.
func (c *RoomClient) QueryRoomtype(r *Room) *RoomTypeQuery {
	query := &RoomTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(roomtype.Table, roomtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, room.RoomtypeTable, room.RoomtypeColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoominfo queries the roominfo edge of a Room.
func (c *RoomClient) QueryRoominfo(r *Room) *RoomInfoQuery {
	query := &RoomInfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(roominfo.Table, roominfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, room.RoominfoTable, room.RoominfoColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomClient) Hooks() []Hook {
	return c.hooks.Room
}

// RoomInfoClient is a client for the RoomInfo schema.
type RoomInfoClient struct {
	config
}

// NewRoomInfoClient returns a client for the RoomInfo from the given config.
func NewRoomInfoClient(c config) *RoomInfoClient {
	return &RoomInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roominfo.Hooks(f(g(h())))`.
func (c *RoomInfoClient) Use(hooks ...Hook) {
	c.hooks.RoomInfo = append(c.hooks.RoomInfo, hooks...)
}

// Create returns a create builder for RoomInfo.
func (c *RoomInfoClient) Create() *RoomInfoCreate {
	mutation := newRoomInfoMutation(c.config, OpCreate)
	return &RoomInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for RoomInfo.
func (c *RoomInfoClient) Update() *RoomInfoUpdate {
	mutation := newRoomInfoMutation(c.config, OpUpdate)
	return &RoomInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomInfoClient) UpdateOne(ri *RoomInfo) *RoomInfoUpdateOne {
	mutation := newRoomInfoMutation(c.config, OpUpdateOne, withRoomInfo(ri))
	return &RoomInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomInfoClient) UpdateOneID(id int) *RoomInfoUpdateOne {
	mutation := newRoomInfoMutation(c.config, OpUpdateOne, withRoomInfoID(id))
	return &RoomInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoomInfo.
func (c *RoomInfoClient) Delete() *RoomInfoDelete {
	mutation := newRoomInfoMutation(c.config, OpDelete)
	return &RoomInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomInfoClient) DeleteOne(ri *RoomInfo) *RoomInfoDeleteOne {
	return c.DeleteOneID(ri.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomInfoClient) DeleteOneID(id int) *RoomInfoDeleteOne {
	builder := c.Delete().Where(roominfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomInfoDeleteOne{builder}
}

// Create returns a query builder for RoomInfo.
func (c *RoomInfoClient) Query() *RoomInfoQuery {
	return &RoomInfoQuery{config: c.config}
}

// Get returns a RoomInfo entity by its id.
func (c *RoomInfoClient) Get(ctx context.Context, id int) (*RoomInfo, error) {
	return c.Query().Where(roominfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomInfoClient) GetX(ctx context.Context, id int) *RoomInfo {
	ri, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ri
}

// QueryRoom queries the room edge of a RoomInfo.
func (c *RoomInfoClient) QueryRoom(ri *RoomInfo) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ri.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roominfo.Table, roominfo.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roominfo.RoomTable, roominfo.RoomColumn),
		)
		fromV = sqlgraph.Neighbors(ri.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomInfoClient) Hooks() []Hook {
	return c.hooks.RoomInfo
}

// RoomStatusClient is a client for the RoomStatus schema.
type RoomStatusClient struct {
	config
}

// NewRoomStatusClient returns a client for the RoomStatus from the given config.
func NewRoomStatusClient(c config) *RoomStatusClient {
	return &RoomStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roomstatus.Hooks(f(g(h())))`.
func (c *RoomStatusClient) Use(hooks ...Hook) {
	c.hooks.RoomStatus = append(c.hooks.RoomStatus, hooks...)
}

// Create returns a create builder for RoomStatus.
func (c *RoomStatusClient) Create() *RoomStatusCreate {
	mutation := newRoomStatusMutation(c.config, OpCreate)
	return &RoomStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for RoomStatus.
func (c *RoomStatusClient) Update() *RoomStatusUpdate {
	mutation := newRoomStatusMutation(c.config, OpUpdate)
	return &RoomStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomStatusClient) UpdateOne(rs *RoomStatus) *RoomStatusUpdateOne {
	mutation := newRoomStatusMutation(c.config, OpUpdateOne, withRoomStatus(rs))
	return &RoomStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomStatusClient) UpdateOneID(id int) *RoomStatusUpdateOne {
	mutation := newRoomStatusMutation(c.config, OpUpdateOne, withRoomStatusID(id))
	return &RoomStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoomStatus.
func (c *RoomStatusClient) Delete() *RoomStatusDelete {
	mutation := newRoomStatusMutation(c.config, OpDelete)
	return &RoomStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomStatusClient) DeleteOne(rs *RoomStatus) *RoomStatusDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomStatusClient) DeleteOneID(id int) *RoomStatusDeleteOne {
	builder := c.Delete().Where(roomstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomStatusDeleteOne{builder}
}

// Create returns a query builder for RoomStatus.
func (c *RoomStatusClient) Query() *RoomStatusQuery {
	return &RoomStatusQuery{config: c.config}
}

// Get returns a RoomStatus entity by its id.
func (c *RoomStatusClient) Get(ctx context.Context, id int) (*RoomStatus, error) {
	return c.Query().Where(roomstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomStatusClient) GetX(ctx context.Context, id int) *RoomStatus {
	rs, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return rs
}

// QueryRoom queries the room edge of a RoomStatus.
func (c *RoomStatusClient) QueryRoom(rs *RoomStatus) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomstatus.Table, roomstatus.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roomstatus.RoomTable, roomstatus.RoomColumn),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomStatusClient) Hooks() []Hook {
	return c.hooks.RoomStatus
}

// RoomTypeClient is a client for the RoomType schema.
type RoomTypeClient struct {
	config
}

// NewRoomTypeClient returns a client for the RoomType from the given config.
func NewRoomTypeClient(c config) *RoomTypeClient {
	return &RoomTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roomtype.Hooks(f(g(h())))`.
func (c *RoomTypeClient) Use(hooks ...Hook) {
	c.hooks.RoomType = append(c.hooks.RoomType, hooks...)
}

// Create returns a create builder for RoomType.
func (c *RoomTypeClient) Create() *RoomTypeCreate {
	mutation := newRoomTypeMutation(c.config, OpCreate)
	return &RoomTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for RoomType.
func (c *RoomTypeClient) Update() *RoomTypeUpdate {
	mutation := newRoomTypeMutation(c.config, OpUpdate)
	return &RoomTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomTypeClient) UpdateOne(rt *RoomType) *RoomTypeUpdateOne {
	mutation := newRoomTypeMutation(c.config, OpUpdateOne, withRoomType(rt))
	return &RoomTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomTypeClient) UpdateOneID(id int) *RoomTypeUpdateOne {
	mutation := newRoomTypeMutation(c.config, OpUpdateOne, withRoomTypeID(id))
	return &RoomTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoomType.
func (c *RoomTypeClient) Delete() *RoomTypeDelete {
	mutation := newRoomTypeMutation(c.config, OpDelete)
	return &RoomTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomTypeClient) DeleteOne(rt *RoomType) *RoomTypeDeleteOne {
	return c.DeleteOneID(rt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomTypeClient) DeleteOneID(id int) *RoomTypeDeleteOne {
	builder := c.Delete().Where(roomtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomTypeDeleteOne{builder}
}

// Create returns a query builder for RoomType.
func (c *RoomTypeClient) Query() *RoomTypeQuery {
	return &RoomTypeQuery{config: c.config}
}

// Get returns a RoomType entity by its id.
func (c *RoomTypeClient) Get(ctx context.Context, id int) (*RoomType, error) {
	return c.Query().Where(roomtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomTypeClient) GetX(ctx context.Context, id int) *RoomType {
	rt, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return rt
}

// QueryRoom queries the room edge of a RoomType.
func (c *RoomTypeClient) QueryRoom(rt *RoomType) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomtype.Table, roomtype.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roomtype.RoomTable, roomtype.RoomColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomTypeClient) Hooks() []Hook {
	return c.hooks.RoomType
}
