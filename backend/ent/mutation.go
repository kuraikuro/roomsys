// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/Asus/app/ent/room"
	"github.com/Asus/app/ent/roominfo"
	"github.com/Asus/app/ent/roomstatus"
	"github.com/Asus/app/ent/roomtype"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeRoom       = "Room"
	TypeRoomInfo   = "RoomInfo"
	TypeRoomStatus = "RoomStatus"
	TypeRoomType   = "RoomType"
)

// RoomMutation represents an operation that mutate the Rooms
// nodes in the graph.
type RoomMutation struct {
	config
	op                Op
	typ               string
	id                *int
	clearedFields     map[string]struct{}
	roomstatus        *int
	clearedroomstatus bool
	roomtype          *int
	clearedroomtype   bool
	roominfo          *int
	clearedroominfo   bool
	done              bool
	oldValue          func(context.Context) (*Room, error)
}

var _ ent.Mutation = (*RoomMutation)(nil)

// roomOption allows to manage the mutation configuration using functional options.
type roomOption func(*RoomMutation)

// newRoomMutation creates new mutation for $n.Name.
func newRoomMutation(c config, op Op, opts ...roomOption) *RoomMutation {
	m := &RoomMutation{
		config:        c,
		op:            op,
		typ:           TypeRoom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomID sets the id field of the mutation.
func withRoomID(id int) roomOption {
	return func(m *RoomMutation) {
		var (
			err   error
			once  sync.Once
			value *Room
		)
		m.oldValue = func(ctx context.Context) (*Room, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Room.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoom sets the old Room of the mutation.
func withRoom(node *Room) roomOption {
	return func(m *RoomMutation) {
		m.oldValue = func(context.Context) (*Room, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRoomstatusID sets the roomstatus edge to RoomStatus by id.
func (m *RoomMutation) SetRoomstatusID(id int) {
	m.roomstatus = &id
}

// ClearRoomstatus clears the roomstatus edge to RoomStatus.
func (m *RoomMutation) ClearRoomstatus() {
	m.clearedroomstatus = true
}

// RoomstatusCleared returns if the edge roomstatus was cleared.
func (m *RoomMutation) RoomstatusCleared() bool {
	return m.clearedroomstatus
}

// RoomstatusID returns the roomstatus id in the mutation.
func (m *RoomMutation) RoomstatusID() (id int, exists bool) {
	if m.roomstatus != nil {
		return *m.roomstatus, true
	}
	return
}

// RoomstatusIDs returns the roomstatus ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RoomstatusID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) RoomstatusIDs() (ids []int) {
	if id := m.roomstatus; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoomstatus reset all changes of the "roomstatus" edge.
func (m *RoomMutation) ResetRoomstatus() {
	m.roomstatus = nil
	m.clearedroomstatus = false
}

// SetRoomtypeID sets the roomtype edge to RoomType by id.
func (m *RoomMutation) SetRoomtypeID(id int) {
	m.roomtype = &id
}

// ClearRoomtype clears the roomtype edge to RoomType.
func (m *RoomMutation) ClearRoomtype() {
	m.clearedroomtype = true
}

// RoomtypeCleared returns if the edge roomtype was cleared.
func (m *RoomMutation) RoomtypeCleared() bool {
	return m.clearedroomtype
}

// RoomtypeID returns the roomtype id in the mutation.
func (m *RoomMutation) RoomtypeID() (id int, exists bool) {
	if m.roomtype != nil {
		return *m.roomtype, true
	}
	return
}

// RoomtypeIDs returns the roomtype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RoomtypeID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) RoomtypeIDs() (ids []int) {
	if id := m.roomtype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoomtype reset all changes of the "roomtype" edge.
func (m *RoomMutation) ResetRoomtype() {
	m.roomtype = nil
	m.clearedroomtype = false
}

// SetRoominfoID sets the roominfo edge to RoomInfo by id.
func (m *RoomMutation) SetRoominfoID(id int) {
	m.roominfo = &id
}

// ClearRoominfo clears the roominfo edge to RoomInfo.
func (m *RoomMutation) ClearRoominfo() {
	m.clearedroominfo = true
}

// RoominfoCleared returns if the edge roominfo was cleared.
func (m *RoomMutation) RoominfoCleared() bool {
	return m.clearedroominfo
}

// RoominfoID returns the roominfo id in the mutation.
func (m *RoomMutation) RoominfoID() (id int, exists bool) {
	if m.roominfo != nil {
		return *m.roominfo, true
	}
	return
}

// RoominfoIDs returns the roominfo ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RoominfoID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) RoominfoIDs() (ids []int) {
	if id := m.roominfo; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoominfo reset all changes of the "roominfo" edge.
func (m *RoomMutation) ResetRoominfo() {
	m.roominfo = nil
	m.clearedroominfo = false
}

// Op returns the operation name.
func (m *RoomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Room).
func (m *RoomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Room field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Room numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Room nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.roomstatus != nil {
		edges = append(edges, room.EdgeRoomstatus)
	}
	if m.roomtype != nil {
		edges = append(edges, room.EdgeRoomtype)
	}
	if m.roominfo != nil {
		edges = append(edges, room.EdgeRoominfo)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeRoomstatus:
		if id := m.roomstatus; id != nil {
			return []ent.Value{*id}
		}
	case room.EdgeRoomtype:
		if id := m.roomtype; id != nil {
			return []ent.Value{*id}
		}
	case room.EdgeRoominfo:
		if id := m.roominfo; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedroomstatus {
		edges = append(edges, room.EdgeRoomstatus)
	}
	if m.clearedroomtype {
		edges = append(edges, room.EdgeRoomtype)
	}
	if m.clearedroominfo {
		edges = append(edges, room.EdgeRoominfo)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomMutation) EdgeCleared(name string) bool {
	switch name {
	case room.EdgeRoomstatus:
		return m.clearedroomstatus
	case room.EdgeRoomtype:
		return m.clearedroomtype
	case room.EdgeRoominfo:
		return m.clearedroominfo
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomMutation) ClearEdge(name string) error {
	switch name {
	case room.EdgeRoomstatus:
		m.ClearRoomstatus()
		return nil
	case room.EdgeRoomtype:
		m.ClearRoomtype()
		return nil
	case room.EdgeRoominfo:
		m.ClearRoominfo()
		return nil
	}
	return fmt.Errorf("unknown Room unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomMutation) ResetEdge(name string) error {
	switch name {
	case room.EdgeRoomstatus:
		m.ResetRoomstatus()
		return nil
	case room.EdgeRoomtype:
		m.ResetRoomtype()
		return nil
	case room.EdgeRoominfo:
		m.ResetRoominfo()
		return nil
	}
	return fmt.Errorf("unknown Room edge %s", name)
}

// RoomInfoMutation represents an operation that mutate the RoomInfos
// nodes in the graph.
type RoomInfoMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Info         *string
	clearedFields map[string]struct{}
	room          map[int]struct{}
	removedroom   map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*RoomInfo, error)
}

var _ ent.Mutation = (*RoomInfoMutation)(nil)

// roominfoOption allows to manage the mutation configuration using functional options.
type roominfoOption func(*RoomInfoMutation)

// newRoomInfoMutation creates new mutation for $n.Name.
func newRoomInfoMutation(c config, op Op, opts ...roominfoOption) *RoomInfoMutation {
	m := &RoomInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeRoomInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomInfoID sets the id field of the mutation.
func withRoomInfoID(id int) roominfoOption {
	return func(m *RoomInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *RoomInfo
		)
		m.oldValue = func(ctx context.Context) (*RoomInfo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RoomInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoomInfo sets the old RoomInfo of the mutation.
func withRoomInfo(node *RoomInfo) roominfoOption {
	return func(m *RoomInfoMutation) {
		m.oldValue = func(context.Context) (*RoomInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomInfoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetInfo sets the Info field.
func (m *RoomInfoMutation) SetInfo(s string) {
	m._Info = &s
}

// Info returns the Info value in the mutation.
func (m *RoomInfoMutation) Info() (r string, exists bool) {
	v := m._Info
	if v == nil {
		return
	}
	return *v, true
}

// OldInfo returns the old Info value of the RoomInfo.
// If the RoomInfo object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomInfoMutation) OldInfo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInfo is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInfo: %w", err)
	}
	return oldValue.Info, nil
}

// ResetInfo reset all changes of the "Info" field.
func (m *RoomInfoMutation) ResetInfo() {
	m._Info = nil
}

// AddRoomIDs adds the room edge to Room by ids.
func (m *RoomInfoMutation) AddRoomIDs(ids ...int) {
	if m.room == nil {
		m.room = make(map[int]struct{})
	}
	for i := range ids {
		m.room[ids[i]] = struct{}{}
	}
}

// RemoveRoomIDs removes the room edge to Room by ids.
func (m *RoomInfoMutation) RemoveRoomIDs(ids ...int) {
	if m.removedroom == nil {
		m.removedroom = make(map[int]struct{})
	}
	for i := range ids {
		m.removedroom[ids[i]] = struct{}{}
	}
}

// RemovedRoom returns the removed ids of room.
func (m *RoomInfoMutation) RemovedRoomIDs() (ids []int) {
	for id := range m.removedroom {
		ids = append(ids, id)
	}
	return
}

// RoomIDs returns the room ids in the mutation.
func (m *RoomInfoMutation) RoomIDs() (ids []int) {
	for id := range m.room {
		ids = append(ids, id)
	}
	return
}

// ResetRoom reset all changes of the "room" edge.
func (m *RoomInfoMutation) ResetRoom() {
	m.room = nil
	m.removedroom = nil
}

// Op returns the operation name.
func (m *RoomInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RoomInfo).
func (m *RoomInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomInfoMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Info != nil {
		fields = append(fields, roominfo.FieldInfo)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roominfo.FieldInfo:
		return m.Info()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case roominfo.FieldInfo:
		return m.OldInfo(ctx)
	}
	return nil, fmt.Errorf("unknown RoomInfo field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roominfo.FieldInfo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInfo(v)
		return nil
	}
	return fmt.Errorf("unknown RoomInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomInfoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomInfoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RoomInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RoomInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomInfoMutation) ResetField(name string) error {
	switch name {
	case roominfo.FieldInfo:
		m.ResetInfo()
		return nil
	}
	return fmt.Errorf("unknown RoomInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.room != nil {
		edges = append(edges, roominfo.EdgeRoom)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomInfoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case roominfo.EdgeRoom:
		ids := make([]ent.Value, 0, len(m.room))
		for id := range m.room {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedroom != nil {
		edges = append(edges, roominfo.EdgeRoom)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomInfoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case roominfo.EdgeRoom:
		ids := make([]ent.Value, 0, len(m.removedroom))
		for id := range m.removedroom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomInfoMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomInfoMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown RoomInfo unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomInfoMutation) ResetEdge(name string) error {
	switch name {
	case roominfo.EdgeRoom:
		m.ResetRoom()
		return nil
	}
	return fmt.Errorf("unknown RoomInfo edge %s", name)
}

// RoomStatusMutation represents an operation that mutate the RoomStatusSlice
// nodes in the graph.
type RoomStatusMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_RoomStatus   *string
	clearedFields map[string]struct{}
	room          map[int]struct{}
	removedroom   map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*RoomStatus, error)
}

var _ ent.Mutation = (*RoomStatusMutation)(nil)

// roomstatusOption allows to manage the mutation configuration using functional options.
type roomstatusOption func(*RoomStatusMutation)

// newRoomStatusMutation creates new mutation for $n.Name.
func newRoomStatusMutation(c config, op Op, opts ...roomstatusOption) *RoomStatusMutation {
	m := &RoomStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeRoomStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomStatusID sets the id field of the mutation.
func withRoomStatusID(id int) roomstatusOption {
	return func(m *RoomStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *RoomStatus
		)
		m.oldValue = func(ctx context.Context) (*RoomStatus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RoomStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoomStatus sets the old RoomStatus of the mutation.
func withRoomStatus(node *RoomStatus) roomstatusOption {
	return func(m *RoomStatusMutation) {
		m.oldValue = func(context.Context) (*RoomStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomStatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRoomStatus sets the RoomStatus field.
func (m *RoomStatusMutation) SetRoomStatus(s string) {
	m._RoomStatus = &s
}

// RoomStatus returns the RoomStatus value in the mutation.
func (m *RoomStatusMutation) RoomStatus() (r string, exists bool) {
	v := m._RoomStatus
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomStatus returns the old RoomStatus value of the RoomStatus.
// If the RoomStatus object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomStatusMutation) OldRoomStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoomStatus is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoomStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomStatus: %w", err)
	}
	return oldValue.RoomStatus, nil
}

// ResetRoomStatus reset all changes of the "RoomStatus" field.
func (m *RoomStatusMutation) ResetRoomStatus() {
	m._RoomStatus = nil
}

// AddRoomIDs adds the room edge to Room by ids.
func (m *RoomStatusMutation) AddRoomIDs(ids ...int) {
	if m.room == nil {
		m.room = make(map[int]struct{})
	}
	for i := range ids {
		m.room[ids[i]] = struct{}{}
	}
}

// RemoveRoomIDs removes the room edge to Room by ids.
func (m *RoomStatusMutation) RemoveRoomIDs(ids ...int) {
	if m.removedroom == nil {
		m.removedroom = make(map[int]struct{})
	}
	for i := range ids {
		m.removedroom[ids[i]] = struct{}{}
	}
}

// RemovedRoom returns the removed ids of room.
func (m *RoomStatusMutation) RemovedRoomIDs() (ids []int) {
	for id := range m.removedroom {
		ids = append(ids, id)
	}
	return
}

// RoomIDs returns the room ids in the mutation.
func (m *RoomStatusMutation) RoomIDs() (ids []int) {
	for id := range m.room {
		ids = append(ids, id)
	}
	return
}

// ResetRoom reset all changes of the "room" edge.
func (m *RoomStatusMutation) ResetRoom() {
	m.room = nil
	m.removedroom = nil
}

// Op returns the operation name.
func (m *RoomStatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RoomStatus).
func (m *RoomStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomStatusMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._RoomStatus != nil {
		fields = append(fields, roomstatus.FieldRoomStatus)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roomstatus.FieldRoomStatus:
		return m.RoomStatus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case roomstatus.FieldRoomStatus:
		return m.OldRoomStatus(ctx)
	}
	return nil, fmt.Errorf("unknown RoomStatus field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roomstatus.FieldRoomStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomStatus(v)
		return nil
	}
	return fmt.Errorf("unknown RoomStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomStatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomStatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RoomStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomStatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomStatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RoomStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomStatusMutation) ResetField(name string) error {
	switch name {
	case roomstatus.FieldRoomStatus:
		m.ResetRoomStatus()
		return nil
	}
	return fmt.Errorf("unknown RoomStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.room != nil {
		edges = append(edges, roomstatus.EdgeRoom)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomStatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case roomstatus.EdgeRoom:
		ids := make([]ent.Value, 0, len(m.room))
		for id := range m.room {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedroom != nil {
		edges = append(edges, roomstatus.EdgeRoom)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomStatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case roomstatus.EdgeRoom:
		ids := make([]ent.Value, 0, len(m.removedroom))
		for id := range m.removedroom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomStatusMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomStatusMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown RoomStatus unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomStatusMutation) ResetEdge(name string) error {
	switch name {
	case roomstatus.EdgeRoom:
		m.ResetRoom()
		return nil
	}
	return fmt.Errorf("unknown RoomStatus edge %s", name)
}

// RoomTypeMutation represents an operation that mutate the RoomTypes
// nodes in the graph.
type RoomTypeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_RoomType     *string
	_Cost         *int
	add_Cost      *int
	clearedFields map[string]struct{}
	room          map[int]struct{}
	removedroom   map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*RoomType, error)
}

var _ ent.Mutation = (*RoomTypeMutation)(nil)

// roomtypeOption allows to manage the mutation configuration using functional options.
type roomtypeOption func(*RoomTypeMutation)

// newRoomTypeMutation creates new mutation for $n.Name.
func newRoomTypeMutation(c config, op Op, opts ...roomtypeOption) *RoomTypeMutation {
	m := &RoomTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeRoomType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomTypeID sets the id field of the mutation.
func withRoomTypeID(id int) roomtypeOption {
	return func(m *RoomTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *RoomType
		)
		m.oldValue = func(ctx context.Context) (*RoomType, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RoomType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoomType sets the old RoomType of the mutation.
func withRoomType(node *RoomType) roomtypeOption {
	return func(m *RoomTypeMutation) {
		m.oldValue = func(context.Context) (*RoomType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRoomType sets the RoomType field.
func (m *RoomTypeMutation) SetRoomType(s string) {
	m._RoomType = &s
}

// RoomType returns the RoomType value in the mutation.
func (m *RoomTypeMutation) RoomType() (r string, exists bool) {
	v := m._RoomType
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomType returns the old RoomType value of the RoomType.
// If the RoomType object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomTypeMutation) OldRoomType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoomType is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoomType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomType: %w", err)
	}
	return oldValue.RoomType, nil
}

// ResetRoomType reset all changes of the "RoomType" field.
func (m *RoomTypeMutation) ResetRoomType() {
	m._RoomType = nil
}

// SetCost sets the Cost field.
func (m *RoomTypeMutation) SetCost(i int) {
	m._Cost = &i
	m.add_Cost = nil
}

// Cost returns the Cost value in the mutation.
func (m *RoomTypeMutation) Cost() (r int, exists bool) {
	v := m._Cost
	if v == nil {
		return
	}
	return *v, true
}

// OldCost returns the old Cost value of the RoomType.
// If the RoomType object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomTypeMutation) OldCost(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCost is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCost: %w", err)
	}
	return oldValue.Cost, nil
}

// AddCost adds i to Cost.
func (m *RoomTypeMutation) AddCost(i int) {
	if m.add_Cost != nil {
		*m.add_Cost += i
	} else {
		m.add_Cost = &i
	}
}

// AddedCost returns the value that was added to the Cost field in this mutation.
func (m *RoomTypeMutation) AddedCost() (r int, exists bool) {
	v := m.add_Cost
	if v == nil {
		return
	}
	return *v, true
}

// ResetCost reset all changes of the "Cost" field.
func (m *RoomTypeMutation) ResetCost() {
	m._Cost = nil
	m.add_Cost = nil
}

// AddRoomIDs adds the room edge to Room by ids.
func (m *RoomTypeMutation) AddRoomIDs(ids ...int) {
	if m.room == nil {
		m.room = make(map[int]struct{})
	}
	for i := range ids {
		m.room[ids[i]] = struct{}{}
	}
}

// RemoveRoomIDs removes the room edge to Room by ids.
func (m *RoomTypeMutation) RemoveRoomIDs(ids ...int) {
	if m.removedroom == nil {
		m.removedroom = make(map[int]struct{})
	}
	for i := range ids {
		m.removedroom[ids[i]] = struct{}{}
	}
}

// RemovedRoom returns the removed ids of room.
func (m *RoomTypeMutation) RemovedRoomIDs() (ids []int) {
	for id := range m.removedroom {
		ids = append(ids, id)
	}
	return
}

// RoomIDs returns the room ids in the mutation.
func (m *RoomTypeMutation) RoomIDs() (ids []int) {
	for id := range m.room {
		ids = append(ids, id)
	}
	return
}

// ResetRoom reset all changes of the "room" edge.
func (m *RoomTypeMutation) ResetRoom() {
	m.room = nil
	m.removedroom = nil
}

// Op returns the operation name.
func (m *RoomTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RoomType).
func (m *RoomTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomTypeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._RoomType != nil {
		fields = append(fields, roomtype.FieldRoomType)
	}
	if m._Cost != nil {
		fields = append(fields, roomtype.FieldCost)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roomtype.FieldRoomType:
		return m.RoomType()
	case roomtype.FieldCost:
		return m.Cost()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case roomtype.FieldRoomType:
		return m.OldRoomType(ctx)
	case roomtype.FieldCost:
		return m.OldCost(ctx)
	}
	return nil, fmt.Errorf("unknown RoomType field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roomtype.FieldRoomType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomType(v)
		return nil
	case roomtype.FieldCost:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCost(v)
		return nil
	}
	return fmt.Errorf("unknown RoomType field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomTypeMutation) AddedFields() []string {
	var fields []string
	if m.add_Cost != nil {
		fields = append(fields, roomtype.FieldCost)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomTypeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case roomtype.FieldCost:
		return m.AddedCost()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case roomtype.FieldCost:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCost(v)
		return nil
	}
	return fmt.Errorf("unknown RoomType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RoomType nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomTypeMutation) ResetField(name string) error {
	switch name {
	case roomtype.FieldRoomType:
		m.ResetRoomType()
		return nil
	case roomtype.FieldCost:
		m.ResetCost()
		return nil
	}
	return fmt.Errorf("unknown RoomType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.room != nil {
		edges = append(edges, roomtype.EdgeRoom)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case roomtype.EdgeRoom:
		ids := make([]ent.Value, 0, len(m.room))
		for id := range m.room {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedroom != nil {
		edges = append(edges, roomtype.EdgeRoom)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case roomtype.EdgeRoom:
		ids := make([]ent.Value, 0, len(m.removedroom))
		for id := range m.removedroom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomTypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown RoomType unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomTypeMutation) ResetEdge(name string) error {
	switch name {
	case roomtype.EdgeRoom:
		m.ResetRoom()
		return nil
	}
	return fmt.Errorf("unknown RoomType edge %s", name)
}
