// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Asus/app/ent/room"
	"github.com/Asus/app/ent/roominfo"
	"github.com/Asus/app/ent/roomstatus"
	"github.com/Asus/app/ent/roomtype"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Room is the model entity for the Room schema.
type Room struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomQuery when eager-loading is set.
	Edges            RoomEdges `json:"edges"`
	room_info_room   *int
	room_status_room *int
	room_type_room   *int
}

// RoomEdges holds the relations/edges for other nodes in the graph.
type RoomEdges struct {
	// Roomstatus holds the value of the roomstatus edge.
	Roomstatus *RoomStatus
	// Roomtype holds the value of the roomtype edge.
	Roomtype *RoomType
	// Roominfo holds the value of the roominfo edge.
	Roominfo *RoomInfo
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RoomstatusOrErr returns the Roomstatus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomEdges) RoomstatusOrErr() (*RoomStatus, error) {
	if e.loadedTypes[0] {
		if e.Roomstatus == nil {
			// The edge roomstatus was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roomstatus.Label}
		}
		return e.Roomstatus, nil
	}
	return nil, &NotLoadedError{edge: "roomstatus"}
}

// RoomtypeOrErr returns the Roomtype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomEdges) RoomtypeOrErr() (*RoomType, error) {
	if e.loadedTypes[1] {
		if e.Roomtype == nil {
			// The edge roomtype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roomtype.Label}
		}
		return e.Roomtype, nil
	}
	return nil, &NotLoadedError{edge: "roomtype"}
}

// RoominfoOrErr returns the Roominfo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomEdges) RoominfoOrErr() (*RoomInfo, error) {
	if e.loadedTypes[2] {
		if e.Roominfo == nil {
			// The edge roominfo was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roominfo.Label}
		}
		return e.Roominfo, nil
	}
	return nil, &NotLoadedError{edge: "roominfo"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Room) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Room) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // room_info_room
		&sql.NullInt64{}, // room_status_room
		&sql.NullInt64{}, // room_type_room
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Room fields.
func (r *Room) assignValues(values ...interface{}) error {
	if m, n := len(values), len(room.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	values = values[0:]
	if len(values) == len(room.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field room_info_room", value)
		} else if value.Valid {
			r.room_info_room = new(int)
			*r.room_info_room = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field room_status_room", value)
		} else if value.Valid {
			r.room_status_room = new(int)
			*r.room_status_room = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field room_type_room", value)
		} else if value.Valid {
			r.room_type_room = new(int)
			*r.room_type_room = int(value.Int64)
		}
	}
	return nil
}

// QueryRoomstatus queries the roomstatus edge of the Room.
func (r *Room) QueryRoomstatus() *RoomStatusQuery {
	return (&RoomClient{config: r.config}).QueryRoomstatus(r)
}

// QueryRoomtype queries the roomtype edge of the Room.
func (r *Room) QueryRoomtype() *RoomTypeQuery {
	return (&RoomClient{config: r.config}).QueryRoomtype(r)
}

// QueryRoominfo queries the roominfo edge of the Room.
func (r *Room) QueryRoominfo() *RoomInfoQuery {
	return (&RoomClient{config: r.config}).QueryRoominfo(r)
}

// Update returns a builder for updating this Room.
// Note that, you need to call Room.Unwrap() before calling this method, if this Room
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Room) Update() *RoomUpdateOne {
	return (&RoomClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Room) Unwrap() *Room {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Room is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Room) String() string {
	var builder strings.Builder
	builder.WriteString("Room(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Rooms is a parsable slice of Room.
type Rooms []*Room

func (r Rooms) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
