// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/Asus/app/ent/room"
	"github.com/Asus/app/ent/roominfo"
	"github.com/Asus/app/ent/roomstatus"
	"github.com/Asus/app/ent/roomtype"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// RoomCreate is the builder for creating a Room entity.
type RoomCreate struct {
	config
	mutation *RoomMutation
	hooks    []Hook
}

// SetRoomstatusID sets the roomstatus edge to RoomStatus by id.
func (rc *RoomCreate) SetRoomstatusID(id int) *RoomCreate {
	rc.mutation.SetRoomstatusID(id)
	return rc
}

// SetNillableRoomstatusID sets the roomstatus edge to RoomStatus by id if the given value is not nil.
func (rc *RoomCreate) SetNillableRoomstatusID(id *int) *RoomCreate {
	if id != nil {
		rc = rc.SetRoomstatusID(*id)
	}
	return rc
}

// SetRoomstatus sets the roomstatus edge to RoomStatus.
func (rc *RoomCreate) SetRoomstatus(r *RoomStatus) *RoomCreate {
	return rc.SetRoomstatusID(r.ID)
}

// SetRoomtypeID sets the roomtype edge to RoomType by id.
func (rc *RoomCreate) SetRoomtypeID(id int) *RoomCreate {
	rc.mutation.SetRoomtypeID(id)
	return rc
}

// SetNillableRoomtypeID sets the roomtype edge to RoomType by id if the given value is not nil.
func (rc *RoomCreate) SetNillableRoomtypeID(id *int) *RoomCreate {
	if id != nil {
		rc = rc.SetRoomtypeID(*id)
	}
	return rc
}

// SetRoomtype sets the roomtype edge to RoomType.
func (rc *RoomCreate) SetRoomtype(r *RoomType) *RoomCreate {
	return rc.SetRoomtypeID(r.ID)
}

// SetRoominfoID sets the roominfo edge to RoomInfo by id.
func (rc *RoomCreate) SetRoominfoID(id int) *RoomCreate {
	rc.mutation.SetRoominfoID(id)
	return rc
}

// SetNillableRoominfoID sets the roominfo edge to RoomInfo by id if the given value is not nil.
func (rc *RoomCreate) SetNillableRoominfoID(id *int) *RoomCreate {
	if id != nil {
		rc = rc.SetRoominfoID(*id)
	}
	return rc
}

// SetRoominfo sets the roominfo edge to RoomInfo.
func (rc *RoomCreate) SetRoominfo(r *RoomInfo) *RoomCreate {
	return rc.SetRoominfoID(r.ID)
}

// Mutation returns the RoomMutation object of the builder.
func (rc *RoomCreate) Mutation() *RoomMutation {
	return rc.mutation
}

// Save creates the Room in the database.
func (rc *RoomCreate) Save(ctx context.Context) (*Room, error) {
	var (
		err  error
		node *Room
	)
	if len(rc.hooks) == 0 {
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RoomCreate) SaveX(ctx context.Context) *Room {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *RoomCreate) sqlSave(ctx context.Context) (*Room, error) {
	r, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}

func (rc *RoomCreate) createSpec() (*Room, *sqlgraph.CreateSpec) {
	var (
		r     = &Room{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: room.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: room.FieldID,
			},
		}
	)
	if nodes := rc.mutation.RoomstatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.RoomstatusTable,
			Columns: []string{room.RoomstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RoomtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.RoomtypeTable,
			Columns: []string{room.RoomtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RoominfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.RoominfoTable,
			Columns: []string{room.RoominfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roominfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return r, _spec
}
